Exception handling in Java is a mechanism to handle runtime errors (exceptions) that occur during the execution of a program. Exceptions are unexpected events that disrupt the normal flow of the program. By handling exceptions, you can gracefully recover from errors and prevent your program from crashing.

In Java, exceptions are represented by objects of classes that are subclasses of the `Throwable` class. There are two main types of exceptions in Java:

1. **Checked Exceptions:** These are exceptions that are checked at compile time. You must either catch these exceptions using a `try-catch` block or declare that your method throws these exceptions using the `throws` keyword. Examples include `IOException`, `SQLException`, etc.

2. **Unchecked Exceptions (Runtime Exceptions):** These are exceptions that are not checked at compile time. They occur at runtime and do not need to be caught or declared. Examples include `ArithmeticException`, `NullPointerException`, etc.

### Exception Handling Keywords in Java:

- **try:** The `try` block is used to enclose the code that may throw an exception. It must be followed by either a `catch` block or a `finally` block (or both).

- **catch:** The `catch` block is used to handle the exception. It catches the exception thrown by the `try` block and executes the code inside it. It must be preceded by a `try` block.

- **finally:** The `finally` block is used to execute important code such as cleanup code, whether an exception is thrown or not. It is executed after the `try` block and any `catch` block.

- **throw:** The `throw` keyword is used to explicitly throw an exception. It is used to create a custom exception or to rethrow an exception caught in a `catch` block.

- **throws:** The `throws` keyword is used in method signatures to declare that a method may throw certain exceptions. It is used for checked exceptions.

### Example of Exception Handling in Java:

```java
public class ExceptionExample {
    public static void main(String[] args) {
        try {
            int result = divide(10, 0);
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero");
        } finally {
            System.out.println("Cleanup code");
        }
    }

    public static int divide(int num1, int num2) {
        return num1 / num2;
    }
}
```

In this example, the `divide` method throws an `ArithmeticException` if `num2` is 0. The `try-catch` block in the `main` method catches this exception and prints an error message. The `finally` block is always executed, regardless of whether an exception occurs or not.

Exception handling is an important aspect of Java programming as it helps in writing robust and reliable code that can handle errors gracefully.
