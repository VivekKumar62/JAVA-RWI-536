The new Date & Time API introduced in Java 8, located in the `java.time` package, provides a more comprehensive and flexible way to
work with dates and times compared to the older `java.util.Date` and `java.util.Calendar` classes. Here are some key features of the
Java 8 Date & Time API:

1. **Immutable:** The classes in the new API, such as `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`, etc., are immutable,
which means that once created, their values cannot be changed. This avoids many of the issues associated with mutability in date and time handling.

2. **Clear Separation:** The API provides clear separation between date, time, and date-time values, making it easier to work with different 
aspects of date and time without mixing them up.

3. **Local Date-Time:** The `LocalDate`, `LocalTime`, and `LocalDateTime` classes represent date, time, and date-time values without reference to
a specific time zone. These classes are suitable for representing dates and times in applications where time zone information is not relevant.

4. **Zoned Date-Time:** The `ZonedDateTime` class represents date-time values with a time zone, allowing you to work with date and time values in
a specific time zone.

5. **Formatting and Parsing:** The API provides classes such as `DateTimeFormatter` for formatting date and time values into strings and parsing 
strings into date and time values. This allows you to customize the format of date and time values according to your needs.

6. **Duration and Period:** The API provides `Duration` and `Period` classes for representing amounts of time, such as a duration in seconds or
a period of days. These classes make it easier to perform calculations involving time intervals.

7. **Backward Compatibility:** Although the new Date & Time API is preferred for new code, it provides methods to convert between the new API
and the old `java.util.Date` and `java.util.Calendar` classes, allowing for backward compatibility with existing code.

Overall, the new Java 8 Date & Time API provides a modern and flexible way to work with dates and times in Java, with improved readability,
maintainability, and functionality compared to the old date and time classes.
